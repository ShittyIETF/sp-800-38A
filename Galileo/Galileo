#include <cstdarg>
#include <cstring>
#include <functional>
#include <string>
#include <vector>

// Simple header-only unit testing framework
struct Galileo {
  static void test(const char *testName, std::function<void(void)> testFn) {
    Test t;
    t.name = testName;
    t.fn = testFn;
    allTests().push_back(t);
  }

  static void assert(const char *assertionName, bool assertionValue) {
    if (assertionValue) {
      // Assertion is fine
      return;
    }

    std::printf("Assertion [%s] failed\n", assertionName);
    currentTestFailed() = true;
  }

  static int run(const char *testClassName) {
    printTestHeader(testClassName);

    for (Test& t: allTests()) {
      currentTestFailed() = false;
      t.fn();

      // Print test status
      printf("\033[1;34m%s\033[0m -> %s\n", t.name.c_str(),
                             currentTestFailed() ? "\033[1;31mFAIL\033[0m"
                                                 : "\033[1;32mPASS\033[0m");
    }

    return 0;
  }

 private:
  static void printTestHeader(const char *className) {
    std::printf("Tests for \033[1;34m%s\033[0m\n", className);
    std::printf("==========");
    int len = (int)strlen(className);
    for (int i = 0; i < len; ++i) {
      putchar('=');
    }
    putchar('\n');
  }

  struct Test {
    std::string name;
    std::function<void(void)> fn;
  };

  static std::vector<Test>& allTests() {
    static std::vector<Test> allTestsStatic;
    return allTestsStatic;
  }
  static bool& currentTestFailed() {
    static bool b;
    return b;
  }
};

