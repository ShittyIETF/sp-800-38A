#include <iterator>
#include <type_traits>

using namespace std;

// Cipher Block Chaining, used with an Initialization Vector of Block size

// TODO Should be a cipher_traits struct, instead of seperate individual parameters
template <int KeySize>
struct ModeCBC {

  typename Cipher<KeySize>::CipherKeyExpansion expandedKey;
  Block iv;

  // TODO change Key(AES) to generic Key type
  ModeCBC(typename Cipher<KeySize>::CipherKey const &key,
          Block const &initializationVector) {
    expandedKey = Cipher<KeySize>::expandKey(key);
    iv = initializationVector;
  }

  // `Block` iterators
  template <typename InputIterator,
            typename OutputIterator,
            // Checks if the iterators are for `Block` type
            // TODO change `Block`(AES) to generic block type
            // TODO check for iterator constraints
            // TODO add unit tests for failed constraint compilation failures
            class = typename enable_if<is_same<typename iterator_traits<InputIterator>::value_type,
                                               Block
                                               >::value &&
                                       is_same<typename iterator_traits<OutputIterator>::value_type,
                                               Block
                                               >::value
                                       >::type
            >
  OutputIterator encrypt(InputIterator inputFirst,
                         InputIterator inputEnd,
                         OutputIterator output
                         ) const {
    Block blockChain = iv;
    for (auto it = inputFirst; it != inputEnd; ++it, ++output) {
      // Add iv (from chain) to input block
      Block in = *it;
      for (int c = 0; c < 4; ++c) {
        for (int r = 0; r < 4; ++r) {
          in[c][r] ^= blockChain[c][r];
        }
      }
      // Put the result into BC
      blockChain = Cipher<KeySize>::encrypt(expandedKey, in);
      *output = blockChain;
    }
    return output;
  }
  template <typename InputIterator,
            typename OutputIterator,
            // Checks if the iterators are for `Block` type
            // TODO change `Block`(AES) to generic block type
            // TODO check for iterator constraints
            // TODO add unit tests for failed constraint compilation failures
            class = typename enable_if<is_same<typename iterator_traits<InputIterator>::value_type,
                                               Block
                                               >::value &&
                                       is_same<typename iterator_traits<OutputIterator>::value_type,
                                               Block
                                               >::value
                                       >::type
            >
  OutputIterator decrypt(InputIterator inputFirst,
                         InputIterator inputEnd,
                         OutputIterator output
                         ) const {
    Block blockChain = iv;
    for (auto it = inputFirst; it != inputEnd; ++it, ++output) {
      Block nextChain = *it;
      Block out = Cipher<KeySize>::decrypt(expandedKey, nextChain);
      for (int c = 0; c < 4; ++c) {
        for (int r = 0; r < 4; ++r) {
          out[c][r] ^= blockChain[c][r];
        }
      }
      *output = out;
      blockChain = nextChain;
    }
    return output;
  }
};
